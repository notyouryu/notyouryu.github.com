<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Principies of Communications</title>
    <url>/2022/04/05/Communications/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从今天开始，准备对通信原理进行一次深度学习。——呜，实际上就是从头学一遍，学第一遍的时候总是感觉云里雾里的，hen烦。<br>从现在开始慢慢更新吧。<br><img src="/images/picture1.jpg" alt="派派牌翻白眼"></p>
]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>电子信息</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建此博客的心得体会</title>
    <url>/2022/04/03/Opioion/</url>
    <content><![CDATA[<h2 id="一、框架"><a href="#一、框架" class="headerlink" title="一、框架"></a>一、框架</h2><p>使用的是 <a href="https://hexo.io/">Hexo</a>框架。Hexo是一个快速、简洁且高效的博客框架。<br>特点：<br>•速度快<br>•可以一键部署<br>•插件和可拓展性<br>•支持MarkDown</p>
<h2 id="二、安装配件并设置环境变量"><a href="#二、安装配件并设置环境变量" class="headerlink" title="二、安装配件并设置环境变量"></a>二、安装配件并设置环境变量</h2><p>依次安装<a href="https://git-scm.com/">git</a>、<a href="http://nodejs.cn/">nodejs</a>。<br>设置环境变量可以参考我的<a href="https://blog.csdn.net/apple_54125764/article/details/123919700?spm=1001.2014.3001.5501">CSDN</a>。</p>
<span id="more"></span>

<h2 id="三、购买域名"><a href="#三、购买域名" class="headerlink" title="三、购买域名"></a>三、购买域名</h2><p>域名购买起来其实挺简单的，我选择的是外网:<a href="https://namesilo-china.com/">namesilo</a>。在这里踩了坑，不建议选择外网！外网便宜但是最后双向绑定到Hithub的时候会巨慢，内贵、需要公安备案、但是相应速度很快。这里需要注意有的是首年便宜后续特贵，一定要看清楚了。还是比较推荐<a href="https://cn.aliyun.com/">阿里云</a>滴！</p>
<h2 id="四、域名与Hithub绑定"><a href="#四、域名与Hithub绑定" class="headerlink" title="四、域名与Hithub绑定"></a>四、域名与Hithub绑定</h2><p>在这里踩了巨量的坑，跟着很多文章走下来都没有结果。随后自己摸爬滚打＋求助各路神仙，慢慢绑定成功了。<br>1、首先进入<a href="https://github.com/">Hitub</a>界面，注册账号。点击右上角的+，创建一个New repository，选择 public。<br>github项目创建完成，点击     “Continue to layouts”，点击发布个人网站，我们的初始网站就建好了，不过这只是一个github.io结尾的。<br>2、安装Hexo，打开git bash 输入以下命令：<br>•npm install hexo-cli -g<br>•hexo init blog<br>•cd blog<br>•npm install<br>•hexo server<br>随后会出来一个<a href="http://localhost:4000/">本地连接</a>,复制到浏览器里我们的本地网站就部署好了，这里有很多<a href="https://hexo.io/themes/">theme</a>，但是大众化的太多了，我选择的是简约清爽的<a href="https://github.com/Shen-Yu/hexo-theme-ayer">ayer</a>。也可以自己写，当然前提是会css。js的话。<br>3、部署代码到Hithub page<br>•首先要生产SSH密钥，这里还是参考<a href="https://blog.csdn.net/apple_54125764/article/details/123919700?spm=1001.2014.3001.5501">CSDN</a>.<br>•接下来就是将本地的静态博客部署到gitHub上，要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件。<br>可以实现如下命令：<br>• npm install hexo -server –save<br>• npm install hexo-deployer-git –save<br>•编辑全局 hexo 的配置文件：_config.yml.编辑全局配置后我们需要重新部署：<br>• hexo clean       #先清除掉已经生成的旧文件<br>• hexo generate    #再生成一次静态文件<br>_ hexo server      #进行本地预览，本地预览没问题的情况下，按下ctrl+c取消预览<br>• hexo deploy      #开始部署到Hithub<br>•访问服务器地址来检查是否部署成功（服务器地址是你的hithub建立的项目地址）。</p>
<p>小结：以后每次发布新文章都要按照步骤来：<br>•hexo clean<br>•hexo generate<br>•hexo deploy<br>4、github pages绑定域名<br> •<a href="ttps://blog.csdn.net/m0_37812513/article/details/78775629?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164899466416780271586113%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164899466416780271586113&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-78775629.142^v5^pc_search_quality_down,157^v4^control&utm_term=域名解析&spm=1018.2226.3001.4187">域名解析额</a>&amp;<a href="https://blog.csdn.net/qq_23547831/article/details/50966172?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164899473916782246478080%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164899473916782246478080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-50966172.142%5Ev5%5Epc_search_quality_down,157%5Ev4%5Econtrol&utm_term=github%E8%A7%A3%E6%9E%90&spm=1018.2226.3001.4187">Github解析</a>,这里就不过多叙述了，多看看文章慢慢踩坑。<br>    踩过的坑：域名解析是需要一个A类，一个CNAME的。A类倒不重要，CANME是最为关键的，TTL设置为3600，也就是1 hour.</p>
<h2 id="五、主题选择"><a href="#五、主题选择" class="headerlink" title="五、主题选择"></a>五、主题选择</h2><p>我选择了Ayer，看中了它的简约风。修改.yml文件，替换背景image图片，替换logo。图片可以用jpg也可以用npg文件。这里注意：背景图片最好选用偏深色系的image，不然后期博客title会看不见，hexo没有给相关调色代码，所以title目前只能是白色。这里要十分感谢几位朋友帮我找logo，背景图，帮我调试的（zcn，cy，hx，ksy）。zcn的微博在本页最下方哦！</p>
<h2 id="六、常见问题"><a href="#六、常见问题" class="headerlink" title="六、常见问题"></a>六、常见问题</h2><p>•域名绑定失败<br>解决办法：首先观察SSH密钥绑定是否成功，然后去Hithub页面查看save是否成功，<a href="ttps://blog.csdn.net/m0_37812513/article/details/78775629?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164899466416780271586113%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164899466416780271586113&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-78775629.142^v5^pc_search_quality_down,157^v4^control&utm_term=域名解析&spm=1018.2226.3001.4187">域名解析额</a>是否正确。<br>• hexo g 失败<br>解决方法:title: hexo 注意冒号后面要加空格.<br>• hexo d 失败<br>解决方法：获取SSH密钥然后 输入自己注册Hithub时的用户名和邮箱.<br>每次修改完成后 按下Ctrl +shift+p 随后输入命令 npm run bulid 和npm run deploy每次deploy完后去hithub中都会有记录 .<br>• 404 not found<br> 解决办法：GitHub中的https上打勾.</p>
<h2 id="七、待办事项"><a href="#七、待办事项" class="headerlink" title="七、待办事项"></a>七、待办事项</h2><p>1 尝试改善一下mathjax渲染.<br>2 添加新的网易云音乐到改界面中.<br>3 修改页面最下方内容 去footer.ejs中找相应解决办法.<br>4 package.json中有相应脚本点一下就可以执行了.<br>5 拓展左侧栏分类 标签的应用.<br>6 学习md语法<br>notyouryu<br>2022/4/3/23:29<br>___________________________________________  #这是一条分割线</p>
<p>更新于2022/4/4 </p>
<hr>
<p>半角空格：” &amp; e m s p;”<br>2022/4/8 2:42</p>
]]></content>
      <categories>
        <category>技术总结</category>
      </categories>
      <tags>
        <tag>hexo&amp;Hithub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World- md语言</title>
    <url>/2022/04/02/Hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>


<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>inPrivate :  ctrl+shift+N</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>开发语言</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Git、Nodejs的安装及环境适配</title>
    <url>/2022/04/05/git/</url>
    <content><![CDATA[<h2 id="一、GIT的下载。"><a href="#一、GIT的下载。" class="headerlink" title="一、GIT的下载。"></a>一、GIT的下载。</h2><p>•我下载的是windows版本的，如果是mac或者linux官网都有下载链接的。一般推荐下载最新版本的也就是64-bit版本的。<br>如果ruby版本跟不上的话还是推荐下载32bit。</p>
<span id="more"></span>

<p>•百度搜索<a href="https://git-scm.com/download/win">git</a>官网。</p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>双击下载好的set up程序<br><img src="/images/picture2.png" alt="P1.1"><br>一直点击next，默认勾选就好，如果后期想要方便打开git bash的话就勾选第一个添加到桌面图标就成。   ps：最后两栏是勾选后会实时更新提示之类的，推荐不勾选。后续一直点击NEXT就ok</p>
<h3 id="三、检查是否安装完成"><a href="#三、检查是否安装完成" class="headerlink" title="三、检查是否安装完成"></a>三、检查是否安装完成</h3><p>按下WIN+R，在弹出的窗口中输入cmd，输入where git（可以获取git的安装路径）&amp;git，回车。出现以下界面那么恭喜你！安装成功噜！<br><img src="/images/picture3.png" alt="P1.2"></p>
<h3 id="四、开发环境配置"><a href="#四、开发环境配置" class="headerlink" title="四、开发环境配置"></a>四、开发环境配置</h3><p>• 注册<a href="https://github.com/">Github</a>账号.<br>注册成功后后，点击git bash（找不到的小朋友去刚刚安装好的目录里面去找到它），下面就开始用账号进行环境配置。<br>• 配置用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name<span class="string">&quot;username&quot;</span>      //  <span class="string">&quot;username&quot;</span>是注册时候的账户名</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.email“username@email.com<span class="string">&quot;  //&quot;</span>username@email.com <span class="string">&quot;是注册用的邮箱</span></span><br></pre></td></tr></table></figure>
<p>•检查时候配置成功<br>执行上述命令后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global --list 检查是否配置成功</span><br></pre></td></tr></table></figure>

<h3 id="五、生成SSH公钥"><a href="#五、生成SSH公钥" class="headerlink" title="五、生成SSH公钥"></a>五、生成SSH公钥</h3><p>在刚刚的git bash 框内输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ssh</span> -keygen -t rsa </span><br></pre></td></tr></table></figure>
<p>回车回车再回车结果如下：<br><img src="/images/picture4.png" alt="P1.3"><br>得到了公钥的 randomart image 形式。随后去git bash 中显示的文件路径中找到生产的ssh文件 .<br>原则上是只会出现这两个滴！但是文件密钥一般有三个（后面解释）<br>用记事本打开id_rsa文件然后copy下来去到 刚刚的<a href="https://github.com/">Github</a>官网找到setting设置。<br>点击左边的SSH  keys ，继续点击New SSH key。把刚刚copy的id_rsa文件粘贴到第二栏，title随便填就好了。随后会收到邮件，这步完成之后就只差最后一步了。<br>•测试配置是否成功<br>进入git bash 命令框输入命令：</p>
<p>$ ssh -T </p>
<p>输入yes后回车<br>最后弹出successful就说明成功了。</p>
<p>常见问题<br>•关于安装路径问题：<br>俺下载了六七次set up 界面给我的显示是从未出现过路径的browse选项，这让我很头秃！<br>因为后续进行 git bash操作的时候会使用到 git 的安装路径！所以我选择卸载后重装，发现还是会选择默认的安装路径进行安装。。。没有办法.（有大佬指教吗）</p>
]]></content>
      <categories>
        <category>软件方面</category>
      </categories>
      <tags>
        <tag>git&amp;nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>关于sakura动态特效</title>
    <url>/2022/04/07/sakura/</url>
    <content><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>var stop, staticx;<br>var img = new Image();<br>img.src = “data:image/png;base64;<br>function Sakura(x, y, s, r, fn) {<br>    <span id="more"></span><br>    this.x = x;<br>    this.y = y;<br>    this.s = s;<br>    this.r = r;<br>    this.fn = fn;<br>}</p>
<p>Sakura.prototype.draw = function (cxt) {<br>    cxt.save();<br>    var xc = 40 * this.s / 4;<br>    cxt.translate(this.x, this.y);<br>    cxt.rotate(this.r);<br>    cxt.drawImage(img, 0, 0, 40 * this.s, 40 * this.s)<br>    cxt.restore();<br>}<br>Sakura.prototype.update = function () {<br>    this.x = this.fn.x(this.x, this.y);<br>    this.y = this.fn.y(this.y, this.y);<br>    this.r = this.fn.r(this.r);<br>    if (this.x &gt; window.innerWidth || this.x &lt; 0 || this.y &gt; window.innerHeight || this.y &lt; 0) {<br>        this.r = getRandom(‘fnr’);<br>        if (Math.random() &gt; 0.4) {<br>            this.x = getRandom(‘x’);<br>            this.y = 0;<br>            this.s = getRandom(‘s’);<br>            this.r = getRandom(‘r’);<br>        } else {<br>            this.x = window.innerWidth;<br>            this.y = getRandom(‘y’);<br>            this.s = getRandom(‘s’);<br>            this.r = getRandom(‘r’);<br>        }<br>    }<br>}<br>SakuraList = function () {<br>    this.list = [];<br>}<br>SakuraList.prototype.push = function (sakura) {<br>    this.list.push(sakura);<br>}<br>SakuraList.prototype.update = function () {<br>    for (var i = 0, len = this.list.length; i &lt; len; i++) {<br>        this.list[i].update();<br>    }<br>}<br>SakuraList.prototype.draw = function (cxt) {<br>    for (var i = 0, len = this.list.length; i &lt; len; i++) {<br>        this.list[i].draw(cxt);<br>    }<br>}<br>SakuraList.prototype.get = function (i) {<br>    return this.list[i];<br>}<br>SakuraList.prototype.size = function () {<br>    return this.list.length;<br>}</p>
<p>function getRandom(option) {<br>    var ret, random;<br>    switch (option) {<br>        case ‘x’:<br>            ret = Math.random() * window.innerWidth;<br>            break;<br>        case ‘y’:<br>            ret = Math.random() * window.innerHeight;<br>            break;<br>        case ‘s’:<br>            ret = Math.random();<br>            break;<br>        case ‘r’:<br>            ret = Math.random() * 6;<br>            break;<br>        case ‘fnx’:<br>            random = -0.5 + Math.random() * 1;<br>            ret = function (x, y) {<br>                return x + 0.5 * random - 1.7;<br>            };<br>            break;<br>        case ‘fny’:<br>            random = 1.5 + Math.random() * 0.7<br>            ret = function (x, y) {<br>                return y + random;<br>            };<br>            break;<br>        case ‘fnr’:<br>            random = Math.random() * 0.03;<br>            ret = function (r) {<br>                return r + random;<br>            };<br>            break;<br>    }<br>    return ret;<br>}</p>
<p>function startSakura() {<br>    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;<br>    var canvas = document.createElement(‘canvas’),<br>        cxt;<br>    staticx = true;<br>    canvas.height = window.innerHeight;<br>    canvas.width = window.innerWidth;<br>    canvas.setAttribute(‘style’, ‘position: fixed;left: 0;top: 0;pointer-events: none;’);<br>    canvas.setAttribute(‘id’, ‘canvas_sakura’);<br>    document.getElementsByTagName(‘body’)[0].appendChild(canvas);<br>    cxt = canvas.getContext(‘2d’);<br>    var sakuraList = new SakuraList();<br>    for (var i = 0; i &lt; 50; i++) {<br>        var sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;<br>        randomX = getRandom(‘x’);<br>        randomY = getRandom(‘y’);<br>        randomR = getRandom(‘r’);<br>        randomS = getRandom(‘s’);<br>        randomFnx = getRandom(‘fnx’);<br>        randomFny = getRandom(‘fny’);<br>        randomFnR = getRandom(‘fnr’);<br>        sakura = new Sakura(randomX, randomY, randomS, randomR, {<br>            x: randomFnx,<br>            y: randomFny,<br>            r: randomFnR<br>        });<br>        sakura.draw(cxt);<br>        sakuraList.push(sakura);<br>    }<br>    stop = requestAnimationFrame(function () {<br>        cxt.clearRect(0, 0, canvas.width, canvas.height);<br>        sakuraList.update();<br>        sakuraList.draw(cxt);<br>        stop = requestAnimationFrame(arguments.callee);<br>    })<br>}<br>window.onresize = function () {<br>    var canvasSnow = document.getElementById(‘canvas_snow’);<br>}<br>img.onload = function () {<br>    startSakura();<br>}</p>
<p>function stopp() {<br>    if (staticx) {<br>        var child = document.getElementById(“canvas_sakura”);<br>        child.parentNode.removeChild(child);<br>        window.cancelAnimationFrame(stop);<br>        staticx = false;<br>    } else {<br>        startSakura();<br>    }<br>}</p>
]]></content>
      <categories>
        <category>技术总结</category>
      </categories>
      <tags>
        <tag>特效</tag>
      </tags>
  </entry>
</search>
